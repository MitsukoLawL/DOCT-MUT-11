package fr.unice.polytech.ogl.islba.ia.secondIA.condition;

import fr.unice.polytech.ogl.islba.ia.secondIA.node.Node;
import fr.unice.polytech.ogl.islba.ia.secondIA.node.NodeExploit;
import fr.unice.polytech.ogl.islba.model.Case;
import fr.unice.polytech.ogl.islba.model.Equipe;
import fr.unice.polytech.ogl.islba.model.EtatDeJeu;
import fr.unice.polytech.ogl.islba.model.resource.Resource;

/**
 * The condition to reach an Exploit Node.
 * We have to know if there is an interesting resource on the current tile
 *
 */
public class ConditionExploit implements Condition{

    private EtatDeJeu etat;
    private String resourceName;
    
    /**
     * The condition only need the current state of the game
     * @param etat
     *          the current state of the game
     */
    public ConditionExploit(EtatDeJeu etat){
        this.etat = etat;
        this.resourceName = null;
    }
    
    /**
     * If one of the resource on the tile is a resource we need
     * it's true.
     * 
     * @return true if there is a resource needed, false otherwise
     */
    @Override
    public boolean isOK() {
        Case currentCase = this.etat.getMapMonde().getCurrentCase();
        Equipe team = etat.getTeam();
        if(currentCase != null){
            for(Resource res : currentCase.getRessources()){
                if(team.isObjective(res.getName())){
                    this.resourceName = res.getName();
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Return an ExploitNode if the resource name we want to exploit isn't
     * null, return null if the name is null
     * @return an ExploitNode or null if the name of the resource we want to exploit is null 
     */
    @Override
    public Node nextNode() {
        if(this.resourceName == null) return null;
        
        return new NodeExploit(this.etat,this.resourceName);
    }

}
